summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_hd <- strat_hd_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_hd_df)) %>%
left_join(diff_mean_hd, by = "stratum") %>%
select(weight, diff_mean)
})
#Low Dimensional Data
ld_prep <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Differences in means
diff_mean_ld <- strat_ld_df %>%
group_by(treatment, stratum) %>%
summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_ld <- strat_ld_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_ld_df)) %>%
left_join(diff_mean_ld, by = "stratum") %>%
select(weight, diff_mean)
})
n_strat <- 10
#High Dimensional Data
hd_prep_alt <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df_alt <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_hd <- strat_hd_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_hd %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
#Low Dimensional Data
ld_prep_alt <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df_alt <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_ld <- strat_ld_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_ld %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 10
#High Dimensional Data
hd_prep_alt <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df_alt <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_hd <- strat_hd_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_hd %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
#Low Dimensional Data
ld_prep_alt <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df_alt <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_ld <- strat_ld_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_ld <- reg_stratum_ld %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 4
#High Dimensional Data
hd_prep <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Differences in means
diff_mean_hd <- strat_hd_df %>%
group_by(treatment, stratum) %>%
summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_hd <- strat_hd_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_hd_df)) %>%
left_join(diff_mean_hd, by = "stratum") %>%
select(weight, diff_mean)
})
#Low Dimensional Data
ld_prep <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Differences in means
diff_mean_ld <- strat_ld_df %>%
group_by(treatment, stratum) %>%
summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_ld <- strat_ld_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_ld_df)) %>%
left_join(diff_mean_ld, by = "stratum") %>%
select(weight, diff_mean)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 9
#High Dimensional Data
hd_prep_alt <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df_alt <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_hd <- strat_hd_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_hd %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
#Low Dimensional Data
ld_prep_alt <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df_alt <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_ld <- strat_ld_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_ld <- reg_stratum_ld %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 10
#High Dimensional Data
hd_prep_alt <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df_alt <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_hd <- strat_hd_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_hd %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
#Low Dimensional Data
ld_prep_alt <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df_alt <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_ld <- strat_ld_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_ld <- reg_stratum_ld %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 12
#High Dimensional Data
hd_prep_alt <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df_alt <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_hd <- strat_hd_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_hd %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
#Low Dimensional Data
ld_prep_alt <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df_alt <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_ld <- strat_ld_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_ld <- reg_stratum_ld %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 15
#High Dimensional Data
hd_prep_alt <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df_alt <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_hd <- strat_hd_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_hd %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
#Low Dimensional Data
ld_prep_alt <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df_alt <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_ld <- strat_ld_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_ld <- reg_stratum_ld %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 16
#High Dimensional Data
hd_prep_alt <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df_alt <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_hd <- strat_hd_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_hd %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
#Low Dimensional Data
ld_prep_alt <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df_alt <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_ld <- strat_ld_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_ld <- reg_stratum_ld %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 17
#High Dimensional Data
hd_prep_alt <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df_alt <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_hd <- strat_hd_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_hd %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
#Low Dimensional Data
ld_prep_alt <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df_alt <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_ld <- strat_ld_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_ld <- reg_stratum_ld %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 16
#High Dimensional Data
hd_prep_alt <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df_alt <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_hd <- strat_hd_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_hd <- reg_stratum_hd %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
#Low Dimensional Data
ld_prep_alt <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df_alt <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Perform Regression on each Stratum
reg_stratum_ld <- strat_ld_df_alt %>%
group_by(stratum) %>%
do(tidy(lm(Y ~ treatment, .)));
#Will end up with a matrix of regression terms alternating with (Intercept) and Y.
#Since we are subtracting the point on the regression where Y(our x term) is 0 from where Y is 1,
#We are doing this type of equation:      Result = (Intercept + (1* Y)) - (Intecept) = Y
#Thus, we only need the estimate for the Y's
reg_est_result_ld <- reg_stratum_ld %>%
filter(term == "treatment") %>%
select(stratum, estimate)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
n_strat <- 16
#High Dimensional Data
hd_prep <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Differences in means
diff_mean_hd <- strat_hd_df %>%
group_by(treatment, stratum) %>%
summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_hd <- strat_hd_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_hd_df)) %>%
left_join(diff_mean_hd, by = "stratum") %>%
select(weight, diff_mean)
})
#Low Dimensional Data
ld_prep <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Differences in means
diff_mean_ld <- strat_ld_df %>%
group_by(treatment, stratum) %>%
summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_ld <- strat_ld_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_ld_df)) %>%
left_join(diff_mean_ld, by = "stratum") %>%
select(weight, diff_mean)
})
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
ATE_hd_alt <- sum(reg_est_result_hd$estimate)/n_strat
ATE_ld_alt <- sum(reg_est_result_ld$estimate)/n_strat
