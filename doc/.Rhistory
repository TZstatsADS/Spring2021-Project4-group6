cat("ATE error for implementation 1 is:", true_high_ATE-pair1high$ATE, ".\n")
cat("\nATE for implementation 2 is:", pair1_highdim_ATE, ".\n")
cat("Processing time for implementation 2 is" , pair1_hd_time, "seconds.\n")
cat("ATE error for implementation 2 is:", true_high_ATE-pair1_highdim_ATE, ".\n")
pair1low = mahalanobis.ate(lowDim_data)
cat("ATE for implementation 2 data is:", pair1low$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair1low$running_time, "seconds.\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair1low$ATE, ".\n")
cat("\nATE for implementation 2 is:", pair1_lowdim_ATE, ".\n")
cat("Processing time for implementation  is" , pair1_ld_time, "seconds.\n")
cat("ATE error for implementation 2 is:", true_high_ATE-pair1_lowdim_ATE, ".\n")
pair1low = mahalanobis.ate(lowDim_data)
cat("ATE for implementation 2 data is:", pair1low$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair1low$running_time, "seconds.\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair1low$ATE, ".\n")
cat("\nATE for implementation 2 is:", pair1_lowdim_ATE, ".\n")
cat("Processing time for implementation  is" , pair1_ld_time, "seconds.\n")
cat("ATE error for implementation 2 is:", true_low_ATE-pair1_lowdim_ATE, ".\n")
# Algorithm: Propensity Matching
# Distance Measure: Propensity Score
# Propensity Score Estimation: Logistic Regression
pair2_highdim_time = system.time({
if (length(na.omit(highDim_data)) != length(highDim_data)) {
print('There are null values in the dataset')
break
} else {
pair_2 <- matchit(A ~ .-Y,
data=highDim_data,
method="full",
distance="glm",
link="logit",
estimand = "ATE")
}
# Preparing Data Frame based on Pairing 2 Matches High Dim, echo=FALSE}
mpair_2 = match.data(pair_2)
# Estimating Treatment Effects using Pairing 2 Matches High Dim, echo=FALSE}
mpair2_fit <- lm(Y ~ . -Y -weights -subclass -distance,
data = mpair_2,
weights = weights)
pair2_highdim_ATE = round(as.numeric(mpair1_fit$coefficients['A']),4)
})
pair2_hd_time <- round(as.numeric(pair2_highdim_time[3]),3)
# Algorithm: Propensity Matching
# Distance Measure: Propensity Score
# Propensity Score Estimation: Logistic Regression
pair2_highdim_time = system.time({
if (length(na.omit(highDim_data)) != length(highDim_data)) {
print('There are null values in the dataset')
break
} else {
pair_2 <- matchit(A ~ .-Y,
data=highDim_data,
method="full",
distance="glm",
link="logit",
estimand = "ATE")
}
# Preparing Data Frame based on Pairing 2 Matches High Dim, echo=FALSE}
mpair_2 = match.data(pair_2)
# Estimating Treatment Effects using Pairing 2 Matches High Dim, echo=FALSE}
mpair2_fit <- lm(Y ~ . -Y -weights -subclass -distance,
data = mpair_2,
weights = weights)
pair2_highdim_ATE = round(as.numeric(mpair2_fit$coefficients['A']),4)
})
pair2_hd_time <- round(as.numeric(pair2_highdim_time[3]),3)
# Algorithm: Propensity Matching
# Distance Measure: Propensity Score
# Propensity Score Estimation: Logistic Regression
pair2_highdim_time = system.time({
if (length(na.omit(highDim_data)) != length(highDim_data)) {
print('There are null values in the dataset')
break
} else {
pair_2 <- matchit(A ~ .-Y,
data=highDim_data,
method="subclass",
distance="glm",
link="logit",
estimand = "ATE")
}
# Preparing Data Frame based on Pairing 2 Matches High Dim, echo=FALSE}
mpair_2 = match.data(pair_2)
# Estimating Treatment Effects using Pairing 2 Matches High Dim, echo=FALSE}
mpair2_fit <- lm(Y ~ . -Y -weights -subclass -distance,
data = mpair_2,
weights = weights)
pair2_highdim_ATE = round(as.numeric(mpair2_fit$coefficients['A']),4)
})
pair2_hd_time <- round(as.numeric(pair2_highdim_time[3]),3)
# Algorithm: Propensity Matching
# Distance Measure: Propensity Score
# Propensity Score Estimation: Logistic Regression
pair2 <- function(data, method) {
pair2_time = system.time({
if (length(na.omit(data)) != length(data)) {
print('There are null values in the dataset')
break
}
else {
pair_2 <- matchit(A ~ .-Y,
data=data,
method=method,
distance="glm",
link="logit",
estimand = "ATE")
}
# Preparing Data Frame based on Pairing 2 Matches
mpair_2 = match.data(pair_2)
# Estimating Treatment Effects using Pairing 2 Matches
mpair2_fit <- lm(Y ~ . -Y -weights -subclass -distance,
data = mpair_2,
weights = weights)
pair2_ATE = round(as.numeric(mpair2_fit$coefficients['A']),4)
})
pair2_time <- round(as.numeric(pair2_highdim_time[3]),3)
return(list(ATE=pair2_ATE, running_time = pair2_time))
}
pair2fhigh = Propensity.Score.ate(highDim_data, methods="full", link="logit")
Propensity.Score.ate <- function(data, methods, link){
start_time <- Sys.time()
match_full<-matchit(A ~ .-Y,data=data,method=methods,distance="glm",link = link, estimand = "ATE")
data.fullMatching <- match.data(match_full)
x = data.fullMatching %>% group_by(subclass,A) %>% summarise(mean_y = mean(Y), .groups = 'drop')
group_ate = x %>% group_by(subclass) %>% summarise(treat_eff = mean_y[A == 1] - mean_y[A == 0], .groups = 'drop')
group_n = data.fullMatching %>% group_by(subclass) %>% count()
ate = sum(group_ate$treat_eff*group_n$n/nrow(data))
end_time <- Sys.time()
return(list(ATE=ate,running_time = end_time - start_time))
}
pair2fhigh = Propensity.Score.ate(highDim_data, methods="full", link="logit")
pair2fhigh_alt = pair2(highDim_data, method="full")
cat("ATE for implementation 1 is:", pair2fhigh$ATE, ".\n")
cat("Processing time for implementation 1 is" ,pair2fhigh$running_time, "seconds.\n")
cat("ATE error for implementation 1 is:", true_high_ATE-pair2fhigh$ATE, ".\n")
cat("\nATE for implementation 2 is:", pair2fhigh_alt$ATE, ".\n")
cat("Processing time for implementation 2 is" ,pair2fhigh_alt$running_time, "seconds.\n")
cat("ATE error for implementation 2 is:", true_high_ATE-pair2fhigh_alt$ATE, ".\n")
pair2flow = Propensity.Score.ate(lowDim_data, methods="full", link="logit")
pair2flow_alt = pair2(lowDim_data, method="full")
cat("ATE for low dimensional data is:", pair2flow$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair2flow$running_time, "seconds.\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair2flow$ATE, ".\n")
cat("\nATE for implementation 2 is:", pair2flow_alt$ATE, ".\n")
cat("Processing time for implementation 2 is" ,pair2flow_alt$running_time, "seconds.\n")
cat("ATE error for implementation 2 is:", true_high_ATE-pair2flow_alt$ATE, ".\n")
pair2flow = Propensity.Score.ate(lowDim_data, methods="full", link="logit")
pair2flow_alt = pair2(lowDim_data, method="full")
cat("ATE for low dimensional data is:", pair2flow$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair2flow$running_time, "seconds.\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair2flow$ATE, ".\n")
cat("\nATE for implementation 2 is:", pair2flow_alt$ATE, ".\n")
cat("Processing time for implementation 2 is" ,pair2flow_alt$running_time, "seconds.\n")
cat("ATE error for implementation 2 is:", true_low_ATE-pair2flow_alt$ATE, ".\n")
pair2slow = Propensity.Score.ate(lowDim_data, methods="subclass", link="logit")
pair2slow_alt = pair2(lowDim_data, method="subclass")
cat("ATE for low dimensional data is:", pair2slow$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair2slow$running_time, "seconds.\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair2slow$ATE, ".\n")
cat("\nATE for implementation 2 is:", pair2slow_alt$ATE, ".\n")
cat("Processing time for implementation 2 is" ,pair2slow_alt$running_time, "seconds.\n")
cat("ATE error for implementation 2 is:", true_low_ATE-pair2slow_alt$ATE, ".\n")
Propensity.Score.ate <- function(data, methods, link){
start_time <- Sys.time()
match_full<-matchit(A ~ .-Y,data=data,method=methods,distance="glm",link = link, estimand = "ATE")
data.fullMatching <- match.data(match_full)
x = data.fullMatching %>% group_by(subclass,A) %>% summarise(mean_y = mean(Y), .groups = 'drop')
group_ate = x %>% group_by(subclass) %>% summarise(treat_eff = mean_y[A == 1] - mean_y[A == 0], .groups = 'drop')
group_n = data.fullMatching %>% group_by(subclass) %>% count()
ate = sum(group_ate$treat_eff*group_n$n/nrow(data))
end_time <- Sys.time()
return(list(ATE=round(ate,4),running_time = round(end_time - start_time, 3)))
}
pair2flow = Propensity.Score.ate(lowDim_data, methods="full", link="logit")
pair2flow_alt = pair2(lowDim_data, method="full")
cat("ATE for low dimensional data is:", pair2flow$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair2flow$running_time, "seconds.\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair2flow$ATE, ".\n")
cat("\nATE for implementation 2 is:", pair2flow_alt$ATE, ".\n")
cat("Processing time for implementation 2 is" ,pair2flow_alt$running_time, "seconds.\n")
cat("ATE error for implementation 2 is:", true_low_ATE-pair2flow_alt$ATE, ".\n")
pair5fhigh = Propensity.Score.ate(highDim_data, methods="full", link="linear.logit")
pair5flow = Propensity.Score.ate(lowDim_data, methods="full", link="linear.logit")
cat("ATE for high dimensional data is:", pair5fhigh$ATE, ".\n")
cat("Processing time for high dimensional data is" ,pair5fhigh$running_time, "seconds.\n")
cat("ATE error for high dimensional data is:", true_high_ATE-pair5fhigh$ATE, ".\n")
cat("ATE for low dimensional data is:", pair5flow$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair5flow$running_time, "seconds.\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair5flow$ATE, ".\n")
pair5shigh = Propensity.Score.ate(highDim_data, methods="subclass", link="linear.logit")
pair5slow = Propensity.Score.ate(lowDim_data, methods="subclass", link="linear.logit")
cat("ATE for high dimensional data is:", pair5shigh$ATE, ".\n")
cat("Processing time for high dimensional data is" ,pair5shigh$running_time, "seconds.\n")
cat("ATE error for high dimensional data is:", true_high_ATE-pair5shigh$ATE, ".\n")
cat("ATE for low dimensional data is:", pair5slow$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair5slow$running_time, "seconds.\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair5slow$ATE, ".\n")
DoublyRobustEst <- function(data) {
X = data %>% select(-Y, -A)
n <- dim(data)[1]
start_time1 <- Sys.time()
#get propensity scores by using logistic regression
logit_model <- glm(A ~., data=data[,-1], family="binomial")
propensity <- predict(logit_model, X, type="response")
data$ps <- propensity
end_time1 <- Sys.time()
start_time2 <- Sys.time()
#split treatment and control group, and do regression for each group
control <- data[data$A == 0, -2]
treatment <- data[data$A == 1, -2]
control_model <- lm(Y ~., data=control)
treatment_model <- lm(Y ~., data=treatment)
data$m0 <- predict(control_model, data[,-c(1,2)])
data$m1 <- predict(treatment_model, data[,-c(1,2)])
#calculate ATE
ATE <- sum((data$A*data$Y-(data$A-data$ps)*data$m1)/data$ps)/n -
sum(((1-data$A)*data$Y+(data$A-data$ps)*data$m0)/(1-data$ps))/n
end_time2 <- Sys.time()
time1 <- end_time1 - start_time1
time2 <- end_time2 - start_time2
df <- data.frame(cbind(ATE, time1, time2))
return(df)
}
DRE.high <- DoublyRobustEst(highDim_data)
diff.high <- true_high_ATE-DRE.high[,1]
cat("ATE for high dimensional data is:", DRE.high[,1], ".\n")
cat("ATE error for high dimensional data is:", diff.high, ".\n")
cat("Processing time for calculating the propensity score is" ,DRE.low[,2], "seconds.\n")
DRE.high <- DoublyRobustEst(highDim_data)
diff.high <- true_high_ATE-DRE.high[,1]
cat("ATE for high dimensional data is:", DRE.high[,1], ".\n")
cat("ATE error for high dimensional data is:", diff.high, ".\n")
cat("Processing time for calculating the propensity score is" ,DRE.high[,2], "seconds.\n")
cat("Processing time for running the algorithm is" ,DRE.high[,3], "seconds.\n")
DoublyRobustEst <- function(data) {
X = data %>% select(-Y, -A)
n <- dim(data)[1]
start_time1 <- Sys.time()
#get propensity scores by using logistic regression
logit_model <- glm(A ~., data=data[,-1], family="binomial")
propensity <- predict(logit_model, X, type="response")
data$ps <- propensity
end_time1 <- Sys.time()
start_time2 <- Sys.time()
#split treatment and control group, and do regression for each group
control <- data[data$A == 0, -2]
treatment <- data[data$A == 1, -2]
control_model <- lm(Y ~., data=control)
treatment_model <- lm(Y ~., data=treatment)
data$m0 <- predict(control_model, data[,-c(1,2)])
data$m1 <- predict(treatment_model, data[,-c(1,2)])
#calculate ATE
ATE <- sum((data$A*data$Y-(data$A-data$ps)*data$m1)/data$ps)/n -
sum(((1-data$A)*data$Y+(data$A-data$ps)*data$m0)/(1-data$ps))/n
end_time2 <- Sys.time()
time1 <- round(end_time1 - start_time1,3)
time2 <- round(end_time2 - start_time2,3)
df <- data.frame(cbind(round(ATE,4), time1, time2))
return(df)
}
DRE.high <- DoublyRobustEst(highDim_data)
diff.high <- true_high_ATE-DRE.high[,1]
cat("ATE for high dimensional data is:", DRE.high[,1], ".\n")
cat("ATE error for high dimensional data is:", diff.high, ".\n")
cat("Processing time for calculating the propensity score is" ,DRE.high[,2], "seconds.\n")
cat("Processing time for running the algorithm is" ,DRE.high[,3], "seconds.\n")
DRE.low <- DoublyRobustEst(lowDim_data)
diff.low <- true_low_ATE-DRE.low[,1]
cat("ATE for low dimensional data is:", DRE.low[,1], ".\n")
cat("ATE error for low dimensional data is:", diff.low, ".\n")
cat("Processing time for calculating the propensity score is" ,DRE.low[,2], "seconds.\n")
cat("Processing time for running the algorithm is" ,DRE.low[,3], "seconds.\n")
DoublyRobustEst <- function(data) {
X = data %>% select(-Y, -A)
n <- dim(data)[1]
start_time1 <- Sys.time()
#get propensity scores by using logistic regression
logit_model <- glm(A ~., data=data[,-1], family="binomial")
propensity <- predict(logit_model, X, type="response")
data$ps <- propensity
end_time1 <- Sys.time()
start_time2 <- Sys.time()
#split treatment and control group, and do regression for each group
control <- data[data$A == 0, -2]
treatment <- data[data$A == 1, -2]
control_model <- lm(Y ~., data=control)
treatment_model <- lm(Y ~., data=treatment)
data$m0 <- predict(control_model, data[,-c(1,2)])
data$m1 <- predict(treatment_model, data[,-c(1,2)])
#calculate ATE
ATE <- sum((data$A*data$Y-(data$A-data$ps)*data$m1)/data$ps)/n -
sum(((1-data$A)*data$Y+(data$A-data$ps)*data$m0)/(1-data$ps))/n
end_time2 <- Sys.time()
time1 <- round(end_time1 - start_time1,3)
time2 <- round(end_time2 - start_time1,3)
df <- data.frame(cbind(round(ATE,4), time1, time2))
return(df)
}
DRE.high <- DoublyRobustEst(highDim_data)
diff.high <- true_high_ATE-DRE.high[,1]
cat("ATE for high dimensional data is:", DRE.high[,1], ".\n")
cat("ATE error for high dimensional data is:", diff.high, ".\n")
cat("Processing time for calculating the propensity score is" ,DRE.high[,2], "seconds.\n")
cat("Processing time for running the algorithm is" ,DRE.high[,3], "seconds.\n")
cat("ATE for low dimensional data is:", pair5slow$ATE, ".\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair5slow$ATE, ".\n")
cat("Processing time for calculating the propensity score is", ps_ld_time, "seconds.\n")
cat("Processing time for runing pairing 5 is" ,pair5slow$running_time, "seconds.\n")
pair2flow = Propensity.Score.ate(lowDim_data, methods="full", link="logit")
pair2flow_alt = pair2(lowDim_data, method="full")
cat("ATE for low dimensional data is:", pair2flow$ATE, ".\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair2flow$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair2flow$running_time, "seconds.\n")
cat("\nATE for implementation 2 is:", pair2flow_alt$ATE, ".\n")
cat("ATE error for implementation 2 is:", true_low_ATE-pair2flow_alt$ATE, ".\n")
cat("Processing time for implementation 2 is" ,pair2flow_alt$running_time, "seconds.\n")
cat("Processing time for calculating the propensity score is", ps_ld_time, "seconds.\n")
pair2flow = Propensity.Score.ate(lowDim_data, methods="full", link="logit")
pair2flow_alt = pair2(lowDim_data, method="full")
cat("ATE for low dimensional data is:", pair2flow$ATE, ".\n")
cat("ATE error for low dimensional data is:", true_low_ATE-pair2flow$ATE, ".\n")
cat("Processing time for low dimensional data is" ,pair2flow$running_time, "seconds.\n")
cat("\nATE for implementation 2 is:", pair2flow_alt$ATE, ".\n")
cat("ATE error for implementation 2 is:", true_low_ATE-pair2flow_alt$ATE, ".\n")
cat("Processing time for implementation 2 is" ,pair2flow_alt$running_time, "seconds.\n")
cat("\nProcessing time for calculating the propensity score is", ps_ld_time, "seconds.\n")
pair2shigh = Propensity.Score.ate(highDim_data, methods="subclass", link="logit")
pair2shigh_alt = pair2(highDim_data, method="subclass")
cat("ATE for high dimensional data is:", pair2shigh$ATE, ".\n")
cat("ATE error for high dimensional data is:", true_high_ATE-pair2shigh$ATE, ".\n")
cat("Processing time for high dimensional data is" ,pair2shigh$running_time, "seconds.\n")
cat("\nATE for implementation 2 is:", pair2shigh_alt$ATE, ".\n")
cat("ATE error for implementation 2 is:", true_high_ATE-pair2shigh_alt$ATE, ".\n")
cat("Processing time for implementation 2 is" ,pair2shigh_alt$running_time, "seconds.\n")
cat("lnProcessing time for calculating the propensity score is", ps_hd_time, "seconds.\n")
pair2shigh = Propensity.Score.ate(highDim_data, methods="subclass", link="logit")
pair2shigh_alt = pair2(highDim_data, method="subclass")
cat("ATE for high dimensional data is:", pair2shigh$ATE, ".\n")
cat("ATE error for high dimensional data is:", true_high_ATE-pair2shigh$ATE, ".\n")
cat("Processing time for high dimensional data is" ,pair2shigh$running_time, "seconds.\n")
cat("\nATE for implementation 2 is:", pair2shigh_alt$ATE, ".\n")
cat("ATE error for implementation 2 is:", true_high_ATE-pair2shigh_alt$ATE, ".\n")
cat("Processing time for implementation 2 is" ,pair2shigh_alt$running_time, "seconds.\n")
cat("\nProcessing time for calculating the propensity score is", ps_hd_time, "seconds.\n")
cat("ATE for high dimensional data is:", pair5fhigh$ATE, ".\n")
cat("ATE error for high dimensional data is:", true_high_ATE-pair5fhigh$ATE, ".\n")
cat("Processing time for calculating the propensity score is", ps_hd_time, "seconds.\n")
cat("Processing time for pairing 5 with full matching is" ,pair5fhigh$running_time, "seconds.\n")
n_strat <- 7
#High Dimensional Data
hd_prep <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Differences in means
diff_mean_hd <- strat_hd_df %>%
group_by(treatment, stratum) %>%
summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_hd <- strat_hd_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_hd_df)) %>%
left_join(diff_mean_hd, by = "stratum") %>%
select(weight, diff_mean);
#Calculate the ATE
ATE_hd <- sum(diff_weight_hd$diff_mean * diff_weight_hd$weight)
})
time_hd <-hd_prep[1] + hd_prep[2]
#Low Dimensional Data
ld_prep <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Differences in means
diff_mean_ld <- strat_ld_df %>%
group_by(treatment, stratum) %>%
summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_ld <- strat_ld_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_ld_df)) %>%
left_join(diff_mean_ld, by = "stratum") %>%
select(weight, diff_mean);
#Calculate the ATE
ATE_ld <- sum(diff_weight_ld$diff_mean * diff_weight_ld$weight)
})
time_ld <- ld_prep[1] + ld_prep[2]
n_strat <- 7
#High Dimensional Data
hd_prep <- system.time({
#Stratify the Data by Propensity score
hd_strat_divider <- n_strat/nrow(ps_hd_df);
strat_hd_df <- ps_hd_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1);
#Differences in means
diff_mean_hd <- strat_hd_df %>%
group_by(treatment, stratum) %>%
summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_hd <- strat_hd_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_hd_df)) %>%
left_join(diff_mean_hd, by = "stratum") %>%
select(weight, diff_mean);
#Calculate the ATE
ATE_hd <- round(sum(diff_weight_hd$diff_mean * diff_weight_hd$weight),4)
})
time_hd <-round(as.numeric(hd_prep[1] + hd_prep[2]),3)
#Low Dimensional Data
ld_prep <- system.time({
#Stratify the Data by Propensity score
ld_strat_divider <- n_strat/nrow(ps_ld_df);
strat_ld_df <- ps_ld_df %>% arrange(prop_score) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1);
#Differences in means
diff_mean_ld <- strat_ld_df %>%
group_by(treatment, stratum) %>%
summarise(mean_treat = mean(Y), .groups = "keep") %>%
mutate(mean_treat= if_else(treatment == 0, -mean_treat, mean_treat)) %>%
ungroup(treatment) %>%
mutate(diff_mean = sum(mean_treat)) %>%
filter(treatment == 0) %>%
select(stratum, diff_mean);
#Weights for each stratum
diff_weight_ld <- strat_ld_df %>%
group_by(stratum) %>%
tally() %>%
mutate(weight = n/nrow(strat_ld_df)) %>%
left_join(diff_mean_ld, by = "stratum") %>%
select(weight, diff_mean);
#Calculate the ATE
ATE_ld <- round(sum(diff_weight_ld$diff_mean * diff_weight_ld$weight),4)
})
time_ld <- round(as.numeric(ld_prep[1] + ld_prep[2]),3)
n_strat <- 7
#High Dimensional Data
hd_prep_alt <- system.time({
hd_strat_divider <- n_strat/nrow(ps_hd_df);
#Append propensity score to the initial dataset
hd_pscore <- matrix(ps_hd_df$prop_score, ncol = 1);
hd_df_pscore <- cbind(highDim_data, hd_pscore);
strat_hd_df_alt <- hd_df_pscore %>% arrange(hd_pscore) %>%
mutate(stratum =  as.integer((1:n() -.5)*hd_strat_divider ) + 1) %>%
select(-hd_pscore);
strat_hd_reg <- strat_hd_df_alt %>% group_by(stratum) %>%
do(strat_reg = lm(Y ~ A + .-stratum, data = .)) %>%
mutate(coefs = list(strat_reg[["coefficients"]])) %>%
select(-strat_reg) %>%
summarize(ajz = coefs[["A"]], .groups = "drop");
#Calculate the ATE
ATE_hd_alt <-  round(mean(strat_hd_reg$ajz),4)
})
time_hd_alt <- round(as.numeric(hd_prep_alt[1] + hd_prep_alt[2]),3)
#Low Dimensional Data
ld_prep_alt <- system.time({
ld_strat_divider <- n_strat/nrow(ps_ld_df);
#Append propensity score to the initial dataset
ld_pscore <- matrix(ps_ld_df$prop_score, ncol = 1);
ld_df_pscore <- cbind(lowDim_data, ld_pscore);
strat_ld_df_alt <- ld_df_pscore %>% arrange(ld_pscore) %>%
mutate(stratum =  as.integer((1:n() -.5)*ld_strat_divider ) + 1) %>%
select(-ld_pscore);
strat_ld_reg <- strat_ld_df_alt %>% group_by(stratum) %>%
do(strat_reg = lm(Y ~ A + .-stratum, data = .)) %>%
mutate(coefs = list(strat_reg[["coefficients"]])) %>%
select(-strat_reg) %>%
summarize(ajz = coefs[["A"]], .groups = "drop")
#Calculate the ATE
ATE_ld_alt <-  round(mean(strat_ld_reg$ajz),4)
})
time_ld_alt <- round(as.numeric(ld_prep_alt[1] + ld_prep_alt[2]),3)
cat("ATE for stratification is:", ATE_hd, ".\n")
cat("Processing time for stratification is" , time_hd, "seconds.\n")
cat("ATE error for stratification is:", true_high_ATE-ATE_hd, ".\n")
cat("\nATE for stratification alternative is:", ATE_hd_alt, ".\n")
cat("Processing time for stratification is" , time_hd_alt, "seconds.\n")
cat("ATE error for stratification alternative is:", true_high_ATE-ATE_hd_alt, ".\n")
cat("\nProcessing time for calculating the propensity score is", ps_hd_time, "seconds.\n")
cat("ATE for stratification is:", ATE_ld, ".\n")
cat("Processing time for stratification is" , time_ld, "seconds.\n")
cat("ATE error for stratification is:", true_low_ATE-ATE_ld, ".\n")
cat("\nATE for stratification alternative is:", ATE_ld_alt, ".\n")
cat("Processing time for stratification is" , time_ld_alt, "seconds.\n")
cat("ATE error for stratification alternative is:", true_low_ATE-ATE_ld_alt, ".\n")
cat("\nProcessing time for calculating the propensity score is", ps_ld_time, "seconds.\n")
pair1high = mahalanobis.ate(highDim_data)
cat("ATE for implementation 1 is:", pair1high$ATE, ".\n")
cat("ATE error for implementation 1 is:", true_high_ATE-pair1high$ATE, ".\n")
cat("Processing time for implementation 1 is" , pair1high$running_time, "seconds.\n")
cat("\nATE for implementation 2 is:", pair1_highdim_ATE, ".\n")
cat("ATE error for implementation 2 is:", true_high_ATE-pair1_highdim_ATE, ".\n")
cat("Processing time for implementation 2 is" , pair1_hd_time, "seconds.\n")
